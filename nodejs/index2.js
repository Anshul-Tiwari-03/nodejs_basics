console.log("Hello this is the beginning of Node js");
console.log("Node Js : A run time environment");
console.log();



console.log("To start with a Project");
console.log("npm init");
console.log("This will generate the package.json file");
console.log(" Create an index.js file ");

console.log("To run a Project");
console.log("node index.js ");


console.log("REPL - Read Evail Print Loop ");
console.log("It is a command line interface usually for testing js ");
console.log("We can launch it by opening a teminal and entering command : node");

console.log("Wrapper Module");
console.log("Each And every file in a function is enrapped in the form");
console.log(
    // " (function(exports,require,module,__filename,__dirname){
        ' Function with parameters as exports , require , module , __filename, __dirname'+
        ' This is how a file is wrapped as a function'+
        ' now due to this we can use the features")'+
        ' exports : A reference to the module.exports to make it accessible to other '+
        ' require : Used to import module ")'+
        ' module : A refernce to current module ")'+
        ' __dirname : Directory name of the current module ")'+
        ' __filename : Filename to the current module');
    console.log(exports);
    console.log(module);
    console.log(require);
    console.log("My Directory path "+__dirname);
    console.log("My filename path "+__filename);
console.log();


console.log("NOW WE ARE MOVING TO NEXT MODULE : PATH");

const path=require('path');
console.log("PATH");
console.log("We have to include it using this ");
console.log("const path = requrie('path')");

console.log("It has built in functions like ");
var pathmodules=['basename', 'dirname','extname','join','normalize','parse','isAbsolute'];
var pathmoduleexample=['basename(anypath,extension) or basename(anypath) extensionis used to remove it from output','dirname(anypath)','extname(file)','join(path1,path2 or string)','normalize(path)','parse(path)','isAbsoulte(path)'];

var basenameeg=path.basename('C:\Users\Anshul\Desktop\combined_project\nodejs\index.js','js');
var dirnameeg=path.dirname('C:\Users\Anshul\Desktop\combined_project\nodejs\index.js');
var extnameeg=path.extname('C:\Users\Anshul\Desktop\combined_project\nodejs\index.js');
var joineg=path.join('C:\Users\Anshul\Desktop\combined_project\nodejs','index.js');
var normalizeeg=path.normalize('C:\Users\Anshul\\\Desktop\\\combined_project\\\nodejs\\index.js');
var parseeg=path.parse('C:\Users\Anshul\Desktop\combined_project\nodejs\index.js');
var isabsoulteeg=path.isAbsolute('C:\Users\Anshul\Desktop\combined_project\nodejs\index.js');
var outputs=[basenameeg,dirnameeg,extnameeg,joineg,normalizeeg,parseeg,isabsoulteeg];
for (var i =0;i<7;i++){
    console.log(pathmodules[i] + "  ---syntax---  "+pathmoduleexample[i]+" --example Outputs --- "+outputs[i]);
}



var sum=(a,b)=>{
    return a+b;
}
console.log("This is output generated by arrow function eg.sum(10,20) will give "+sum(10,20));

console.log("");
console.log("Sample demonstration");
const circle=require('./circle');
console.log("Here is demonstration of require to reference the circle.js");
console.log("In circle.js we had a  perimieter and area");
console.log("using exports on both value make it accessible in index.js");
console.log(circle.area(circle.radius()));
// console.log(circle.name+ " Another demonstration of exports of variable "+circle.email);
console.log("");


console.log("NOW WE ARE MOVING TO NEXT MODULE : FILESYSTEM");
console.log("FILESYSTEM");
console.log("filesystem enables interacting with the files and filesystem based on POSIX function");
console.log();
console.log("Promise Based Api : const fs = require('fs/promises'); ");
console.log("Sync Api : const fs = require('fs'); ");
console.log("Callback Api :  const fs = require('fs');");
console.log();
console.log("Sample Functions Are");
console.log("                   : Provides asyncs based file system methods");
console.log("                   : access(path) => check if dir or file exists or not");
console.log("                   : mkdir(path) => Creates a directory async");
console.log("                   : readdir() => reads content of directory asnyc");
console.log("                   : remdir() => removes the directory identified by path");
console.log("                   : writeFile() => writes files async if present then replaces it");
console.log("                   : readFile() => reads file asnyc ");
console.log("                   : appendFile() => appends file if present or else create a new");
console.log("                   : copyFile() => copy file src to dest");
console.log("                   : stat() => gives statistics of the file");
console.log();

console.log("OS MODULE");
console.log("It provides operating system-related utility and properties");
console.log("const os = require('os'); ")
console.log("Functions");
console.log("platform() => returns the string indentifying the operating system");
console.log("arch() => returns the architecture for which linux was configured");
console.log("cpus() => returns an array of objects containing information");
console.log("hostname() => returns the host name of the operating system");
console.log("freemem() => returns the amount of free memory in bytes as an integer");
console.log("totalmem() => returns the amount of total memory in bytes as an integer");
console.log();

console.log("URL MODULE");
console.log("It provides utilities for URL resolution and parsing");
console.log("const url = require('url'); ");
console.log("setter and getter ");
console.log("hash -> gets and sets fragment portion of url");
console.log("host -> gets and sets host portion of url");
console.log("hostname -> gets and sets host portion of url -> the key differnce is host gives port as well whereas hostname does not return");
console.log("query -> It will give the query as a whole");
console.log("now we can get the values like a key value eg query.id");
console.log();

console.log("EVENT   MODULE");
console.log("It provides utilities for URL resolution and parsing");
console.log("const events= require('events');");
console.log("var eventEmitter= new events();");
console.log("Event emitter is registered using on() method ");
console.log("Syntax : on(eventname, callback) ");
console.log("Event emitter is to be fired once using once() method ");
console.log("Event emitter is fired using emit()");
console.log("Syntax : emit(eventname,args) ");
console.log();

console.log("HTTP  MODULE");
console.log("Http module provides various features that are difficult to use for now  ");
console.log("const http= require('http');");
console.log("to create a server ");
console.log("createServer([options][requeslistener]) ");
console.log("returns a new instance of http server ");
console.log("createServer((req,res){}) ");
console.log("res properites");
console.log("               res.setHeader('Content-Type','text/plain');");
console.log("               res.write('Some content for web');");
console.log("               res.end('Some ending content for web');");
console.log("req properites");
console.log("               req.url");
console.log("               req.method");
console.log();


console.log("USING TEMPLATES ");
console.log("const fs = require('fs');");
console.log("fs.readFile('./public/home.html',(error,data)=>{ res.end(data); })")

console.log("FORM REQUESTS");
console.log("form can be get or post requests");
console.log("Access the url using const url = require('url');");
console.log("const parsedUrl = url.parse(req.url, true);");
console.log("const path = parsedUrl.pathname;");
console.log("const query = parsedUrl.query;");
console.log("now we can check for path and method");
console.log(" if (path=='form_action_url'){");
console.log("       if (req.method=='GET'){ ");
console.log("           res.send('<h1>THis is response for the get method</h1>) ");
console.log("       }");
console.log("       else if (req.method=='POST'){ ");
console.log("           res.send('<h1>THis is response for the post method</h1>) ");
console.log("       }");
console.log("");
// console.log("           res.send('<h1>THis is response for the no method</h1>) ");
// console.log("       }");





